package mySequenceAlignment;

public class DPA {//Dynamic Programming Algorithm
	
	private static final int MATCH = 0;
	private static final int MISMATCH = 1;
	private static final int GAP = 2;
	
	//向右移动R(right)，向下移动D(down),向右下移动L(lowright)
	//生成对对齐方案数组rule和最小惩罚数组pnt
	private static String align(String strA,String strB){
        int m = strA.length(),n = strB.length();
        int pntAll, penalty;
        String direct;
        int[][] pnt = new int[m+1][n+1]; //pnt数组记录子问题的最有对齐方案的分数，也即子问题的最高分数。
        
        String[][] rule = new String[m+1][n+1];//rule数组记录对齐方案
        //rule初始化
        //rule初始化
        rule [m][n] = "";
        for (int i = m-1; i >= 0; i--) {
            rule[i][n] = "D"+rule[i+1][n];
            pnt[i][n] = pnt[i+1][n]+2;
        }
        for (int i = n-1; i >= 0; i--) {
        	rule[m][i] = "R"+rule[m][i+1];
        	pnt[m][i] = pnt[m][i+1]+2;
        }
        for (int i = m-1; i >= 0; i--) {
            for (int j = n-1; j >= 0; j--) {
                if(strA.charAt(i) == strB.charAt(j)) penalty = 0;
                else penalty = 1;
                
                if(pnt[i+1][j+1]+penalty >= pnt[i+1][j]+2){
                	pntAll=pnt[i+1][j]+2;
                	direct = "D"+rule[i+1][j];
                }else{
                	pntAll=pnt[i+1][j+1]+penalty;
                	direct = "L"+rule[i+1][j+1];
                }
                	
                if(pntAll >= pnt[i][j+1]+2){
                	pntAll=pnt[i][j+1]+2;
                	direct = "R"+rule[i][j+1];
                }
                pnt[i][j] = pntAll;
                rule[i][j] = direct;
            }
        }
        /*
        //格式化输出pnt数组
        for (int i = 0; i < m+1; i++) {
            for (int j = 0; j < n+1; j++) {
                System.out.format("%3d",pnt[i][j]);
            }
            System.out.println();
        }
        //格式化输出rule数组
        for (int i = 0; i < m+1; i++) {
            for (int j = 0; j < n+1; j++) {
                System.out.format("%-15s",rule[i][j]);
            }
            System.out.println();
        }*/
        //返回最优的对齐方法对应的规则
        return rule[0][0];
    }
    //生成对齐后的字符串
	private static String[] generate(String base,String ...origin){
        int num = origin.length;
        String[] align = new String[num];
        for (int i = 0; i < num; i++) {
            if (origin[i].length() == base.length()) {
                align[i] = origin[i];
            }else {//base.length()只能是等于或者大于两个原字符串的长度
                String tmp = "";
                for (int j = 0,k = 0; j < base.length(); j++) {
                    if (base.charAt(j) == 'R') {
                        if (i == 0) {tmp = tmp+"_";}
                        else{tmp = tmp+origin[i].charAt(k++);}
                    }else if(base.charAt(j) == 'D'){
                        if (i == 0) {tmp = tmp+origin[i].charAt(k++);}
                        else{tmp = tmp+"_";}
                    }
                    else {
                        tmp = tmp+origin[i].charAt(k++);
                    }
                }
                align[i] = tmp;
            }
        }
        return align;
    }
	
	public static String[] getAlignedSequences(String sequenceA, String sequenceB){
		String ruleStr = align(sequenceA, sequenceB);
		String[] SqAlignment= DPA.generate(ruleStr, sequenceA, sequenceB);
		return SqAlignment;
	}
}

